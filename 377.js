/*! For license information please see 377.js.LICENSE.txt */
(()=>{"use strict";var t={871:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Emitter=void 0,e.Emitter=class{constructor(){this.subscribers=[]}subscribe(t){this.subscribers.push(t)}unsubscribe(t){this.subscribers=this.subscribers.filter((e=>e!==t))}emit(...t){for(const e of this.subscribers)e(...t)}}},545:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},839:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Query=void 0;const r=o(871);e.Query=class{constructor(t,e){this.world=t,this.mask=e,this.entities=new Set,this.onEntityAdd=new r.Emitter,this.onEntityRemove=new r.Emitter}onAddSubscribe(t){this.onEntityAdd.subscribe(t);for(const e of this.entities)t(e)}onRemoveSubscribe(t){this.onEntityRemove.subscribe(t)}onAddUnsubscribe(t){this.onEntityAdd.unsubscribe(t)}onRemoveUnsubscribe(t){this.onEntityRemove.unsubscribe(t)}add(t){this.entities.add(t),this.onEntityAdd.emit(t)}remove(t){this.entities.delete(t),this.onEntityRemove.emit(t)}}},607:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0})},805:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.World=void 0;const r=o(655).__importDefault(o(800)),n=o(839);e.World=class{constructor(t){this.nextId=0,this.entitiesMax=t,this.pool=[],this.lookupTable=new Int32Array(t).fill(-1),this.entities=[],this.components=[],this.masks=[],this.queries=[],this.registeredComponents={},this.systems=[]}getComponentIndex(t){const e=this.registeredComponents[t.cachedComponentId];if(void 0===e)throw new Error(`Component ${t.name} is not registered`);return e}registerComponent(t){if(!this.registeredComponents[t.name]){t.cachedComponentId=t.name;const e=Object.keys(this.registeredComponents).length;this.registeredComponents[t.name]=e}}getNextId(){const t=this.pool.pop();return null!=t?t:this.nextId++}createQuery(t){const e=[];for(const o of t)e.push(this.getComponentIndex(o));const o=new r.default(e);let s=((t,e)=>{for(const o of e.values())if(o.mask.equals(t))return o})(o,this.queries);if(!s){s=new n.Query(this,o),this.queries.push(s);for(const t of this.entities.values())0===s.mask.difference_size(this.masks[t])&&s.add(t)}return s}createEntity(){const t=this.getNextId();return this.lookupTable[t]=this.entities.length,this.masks[t]=new r.default,this.components[t]=[],this.entities.push(t),t}removeEntity(t){if(-1===this.lookupTable[t])throw new Error(`Entity ${t} does not exist`);const e=this.lookupTable[t],o=this.entities.pop();o&&e<this.entities.length&&(this.entities[e]=o,this.lookupTable[o]=e),this.lookupTable[t]=-1,this.pool.push(t);for(const e of this.queries)e.entities.has(t)&&e.remove(t)}addComponent(t,e){const o=Object.getPrototypeOf(e).constructor,r=this.registeredComponents[o.cachedComponentId];if(void 0===r)throw new Error(`Component ${o.name} is not registered`);this.components[t][r]=e;const n=this.masks[t];n.add(r);for(const e of this.queries)e.entities.has(t)||0===e.mask.difference_size(n)&&e.add(t)}removeComponent(t,e){const o=this.getComponentIndex(e);this.masks[t].remove(o),this.components[t][o]=void 0;for(const e of this.queries)e.entities.has(t)&&0!==e.mask.difference_size(this.masks[t])&&e.remove(t)}hasComponent(t,e){const o=this.getComponentIndex(e);return!!this.components[t][o]}getComponent(t,e){const o=this.getComponentIndex(e);return this.components[t][o]}addSystem(t){this.systems.push(t)}removeSystem(t){for(const[e,o]of this.systems.entries())if(o.constructor.name===t.name)return o.exit&&o.exit(),void this.systems.splice(e,1)}update(t){for(const e of this.systems)e.update&&e.update(t)}}},549:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});const r=o(655);r.__exportStar(o(805),e),r.__exportStar(o(839),e),r.__exportStar(o(607),e),r.__exportStar(o(545),e)},800:t=>{function e(t){if(this.words=[],t)if(Symbol&&Symbol.iterator&&void 0!==t[Symbol.iterator]){const e=t[Symbol.iterator]();let o=e.next();for(;!o.done;)this.add(o.value),o=e.next()}else for(let e=0;e<t.length;e++)this.add(t[e])}e.prototype.fromWords=function(t){const o=Object.create(e.prototype);return o.words=t,o},e.prototype.add=function(t){this.resize(t),this.words[t>>>5]|=1<<t},e.prototype.flip=function(t){this.resize(t),this.words[t>>>5]^=1<<t},e.prototype.clear=function(){this.words.length=0},e.prototype.remove=function(t){this.resize(t),this.words[t>>>5]&=~(1<<t)},e.prototype.isEmpty=function(t){const e=this.words.length;for(let t=0;t<e;t++)if(0!==this.words[t])return!1;return!0},e.prototype.has=function(t){return 0!=(this.words[t>>>5]&1<<t)},e.prototype.checkedAdd=function(t){this.resize(t);const e=this.words[t>>>5],o=e|1<<t;return this.words[t>>>5]=o,(o^e)>>>t},e.prototype.trim=function(t){let e=this.words.length;for(;e>0&&0===this.words[e-1];)e--;this.words=this.words.slice(0,e)},e.prototype.resize=function(t){const e=t+32>>>5;for(let t=this.words.length;t<e;t++)this.words[t]=0},e.prototype.hammingWeight=function(t){return 16843009*((t=(858993459&(t-=t>>>1&1431655765))+(t>>>2&858993459))+(t>>>4)&252645135)>>>24},e.prototype.hammingWeight4=function(t,e,o,r){return 16843009*((t=(t=(858993459&(t-=t>>>1&1431655765))+(t>>>2&858993459))+(t>>>4)&252645135)+(e=(e=(858993459&(e-=e>>>1&1431655765))+(e>>>2&858993459))+(e>>>4)&252645135)+(o=(o=(858993459&(o-=o>>>1&1431655765))+(o>>>2&858993459))+(o>>>4)&252645135)+(r=(r=(858993459&(r-=r>>>1&1431655765))+(r>>>2&858993459))+(r>>>4)&252645135))>>>24},e.prototype.size=function(){let t=0;const e=this.words.length,o=this.words;for(let r=0;r<e;r++)t+=this.hammingWeight(o[r]);return t},e.prototype.array=function(){const t=new Array(this.size());let e=0;const o=this.words.length;for(let r=0;r<o;++r){let o=this.words[r];for(;0!=o;){const n=o&-o;t[e++]=(r<<5)+this.hammingWeight(n-1|0),o^=n}}return t},e.prototype.forEach=function(t){const e=this.words.length;for(let o=0;o<e;++o){let e=this.words[o];for(;0!=e;){const r=e&-e;t((o<<5)+this.hammingWeight(r-1|0)),e^=r}}},e.prototype[Symbol.iterator]=function*(){const t=this.words.length;for(let e=0;e<t;++e){let t=this.words[e];for(;0!=t;){const o=t&-t;yield(e<<5)+this.hammingWeight(o-1|0),t^=o}}},e.prototype.clone=function(){const t=Object.create(e.prototype);return t.words=this.words.slice(),t},e.prototype.intersects=function(t){const e=Math.min(this.words.length,t.words.length);for(let o=0;o<e;++o)if(0!=(this.words[o]&t.words[o]))return!0;return!1},e.prototype.intersection=function(t){const e=Math.min(this.words.length,t.words.length);let o=0;for(;o+7<e;o+=8)this.words[o]&=t.words[o],this.words[o+1]&=t.words[o+1],this.words[o+2]&=t.words[o+2],this.words[o+3]&=t.words[o+3],this.words[o+4]&=t.words[o+4],this.words[o+5]&=t.words[o+5],this.words[o+6]&=t.words[o+6],this.words[o+7]&=t.words[o+7];for(;o<e;++o)this.words[o]&=t.words[o];const r=this.words.length;for(o=e;o<r;++o)this.words[o]=0;return this},e.prototype.intersection_size=function(t){const e=Math.min(this.words.length,t.words.length);let o=0;for(let r=0;r<e;++r)o+=this.hammingWeight(this.words[r]&t.words[r]);return o},e.prototype.new_intersection=function(t){const o=Object.create(e.prototype),r=Math.min(this.words.length,t.words.length);o.words=new Array(r);let n=0;for(;n+7<r;n+=8)o.words[n]=this.words[n]&t.words[n],o.words[n+1]=this.words[n+1]&t.words[n+1],o.words[n+2]=this.words[n+2]&t.words[n+2],o.words[n+3]=this.words[n+3]&t.words[n+3],o.words[n+4]=this.words[n+4]&t.words[n+4],o.words[n+5]=this.words[n+5]&t.words[n+5],o.words[n+6]=this.words[n+6]&t.words[n+6],o.words[n+7]=this.words[n+7]&t.words[n+7];for(;n<r;++n)o.words[n]=this.words[n]&t.words[n];return o},e.prototype.equals=function(t){const e=Math.min(this.words.length,t.words.length);for(let o=0;o<e;++o)if(this.words[o]!=t.words[o])return!1;if(this.words.length<t.words.length){const e=t.words.length;for(let o=this.words.length;o<e;++o)if(0!=t.words[o])return!1}else if(t.words.length<this.words.length){const e=this.words.length;for(let o=t.words.length;o<e;++o)if(0!=this.words[o])return!1}return!0},e.prototype.difference=function(t){const e=Math.min(this.words.length,t.words.length);let o=0;for(;o+7<e;o+=8)this.words[o]&=~t.words[o],this.words[o+1]&=~t.words[o+1],this.words[o+2]&=~t.words[o+2],this.words[o+3]&=~t.words[o+3],this.words[o+4]&=~t.words[o+4],this.words[o+5]&=~t.words[o+5],this.words[o+6]&=~t.words[o+6],this.words[o+7]&=~t.words[o+7];for(;o<e;++o)this.words[o]&=~t.words[o];return this},e.prototype.difference2=function(t){const e=Math.min(this.words.length,t.words.length);let o=0;for(;o+7<e;o+=8)t.words[o]=this.words[o]&~t.words[o],t.words[o+1]=this.words[o+1]&~t.words[o+1],t.words[o+2]=this.words[o+2]&~t.words[o+2],t.words[o+3]=this.words[o+3]&~t.words[o+3],t.words[o+4]=this.words[o+4]&~t.words[o+4],t.words[o+5]=this.words[o+5]&~t.words[o+5],t.words[o+6]=this.words[o+6]&~t.words[o+6],t.words[o+7]=this.words[o+7]&~t.words[o+7];for(;o<e;++o)t.words[o]=this.words[o]&~t.words[o];for(o=this.words.length-1;o>=e;--o)t.words[o]=this.words[o];return t.words=t.words.slice(0,this.words.length),t},e.prototype.new_difference=function(t){return this.clone().difference(t)},e.prototype.difference_size=function(t){const e=Math.min(this.words.length,t.words.length);let o=0,r=0;for(;r<e;++r)o+=this.hammingWeight(this.words[r]&~t.words[r]);const n=this.words.length;for(;r<n;++r)o+=this.hammingWeight(this.words[r]);return o},e.prototype.change=function(t){const e=Math.min(this.words.length,t.words.length);let o=0;for(;o+7<e;o+=8)this.words[o]^=t.words[o],this.words[o+1]^=t.words[o+1],this.words[o+2]^=t.words[o+2],this.words[o+3]^=t.words[o+3],this.words[o+4]^=t.words[o+4],this.words[o+5]^=t.words[o+5],this.words[o+6]^=t.words[o+6],this.words[o+7]^=t.words[o+7];for(;o<e;++o)this.words[o]^=t.words[o];for(o=t.words.length-1;o>=e;--o)this.words[o]=t.words[o];return this},e.prototype.new_change=function(t){const o=Object.create(e.prototype),r=Math.max(this.words.length,t.words.length);o.words=new Array(r);const n=Math.min(this.words.length,t.words.length);let s=0;for(;s+7<n;s+=8)o.words[s]=this.words[s]^t.words[s],o.words[s+1]=this.words[s+1]^t.words[s+1],o.words[s+2]=this.words[s+2]^t.words[s+2],o.words[s+3]=this.words[s+3]^t.words[s+3],o.words[s+4]=this.words[s+4]^t.words[s+4],o.words[s+5]=this.words[s+5]^t.words[s+5],o.words[s+6]=this.words[s+6]^t.words[s+6],o.words[s+7]=this.words[s+7]^t.words[s+7];for(;s<n;++s)o.words[s]=this.words[s]^t.words[s];const i=this.words.length;for(s=n;s<i;++s)o.words[s]=this.words[s];const d=t.words.length;for(s=n;s<d;++s)o.words[s]=t.words[s];return o},e.prototype.change_size=function(t){const e=Math.min(this.words.length,t.words.length);let o=0,r=0;for(;r<e;++r)o+=this.hammingWeight(this.words[r]^t.words[r]);const n=this.words.length>t.words.length?this:t,s=n.words.length;for(;r<s;++r)o+=this.hammingWeight(n.words[r]);return o},e.prototype.toString=function(){return"{"+this.array().join(",")+"}"},e.prototype.union=function(t){const e=Math.min(this.words.length,t.words.length);let o=0;for(;o+7<e;o+=8)this.words[o]|=t.words[o],this.words[o+1]|=t.words[o+1],this.words[o+2]|=t.words[o+2],this.words[o+3]|=t.words[o+3],this.words[o+4]|=t.words[o+4],this.words[o+5]|=t.words[o+5],this.words[o+6]|=t.words[o+6],this.words[o+7]|=t.words[o+7];for(;o<e;++o)this.words[o]|=t.words[o];if(this.words.length<t.words.length){this.resize((t.words.length<<5)-1);const o=t.words.length;for(let r=e;r<o;++r)this.words[r]=t.words[r]}return this},e.prototype.new_union=function(t){const o=Object.create(e.prototype),r=Math.max(this.words.length,t.words.length);o.words=new Array(r);const n=Math.min(this.words.length,t.words.length);let s=0;for(;s+7<n;s+=8)o.words[s]=this.words[s]|t.words[s],o.words[s+1]=this.words[s+1]|t.words[s+1],o.words[s+2]=this.words[s+2]|t.words[s+2],o.words[s+3]=this.words[s+3]|t.words[s+3],o.words[s+4]=this.words[s+4]|t.words[s+4],o.words[s+5]=this.words[s+5]|t.words[s+5],o.words[s+6]=this.words[s+6]|t.words[s+6],o.words[s+7]=this.words[s+7]|t.words[s+7];for(;s<n;++s)o.words[s]=this.words[s]|t.words[s];const i=this.words.length;for(s=n;s<i;++s)o.words[s]=this.words[s];const d=t.words.length;for(s=n;s<d;++s)o.words[s]=t.words[s];return o},e.prototype.union_size=function(t){const e=Math.min(this.words.length,t.words.length);let o=0;for(let r=0;r<e;++r)o+=this.hammingWeight(this.words[r]|t.words[r]);if(this.words.length<t.words.length){const e=t.words.length;for(let r=this.words.length;r<e;++r)o+=this.hammingWeight(0|t.words[r])}else{const e=this.words.length;for(let r=t.words.length;r<e;++r)o+=this.hammingWeight(0|this.words[r])}return o},t.exports=e},655:(t,e,o)=>{o.r(e),o.d(e,{__extends:()=>n,__assign:()=>s,__rest:()=>i,__decorate:()=>d,__param:()=>c,__metadata:()=>a,__awaiter:()=>h,__generator:()=>w,__createBinding:()=>l,__exportStar:()=>u,__values:()=>f,__read:()=>p,__spread:()=>m,__spreadArrays:()=>y,__spreadArray:()=>g,__await:()=>v,__asyncGenerator:()=>b,__asyncDelegator:()=>_,__asyncValues:()=>C,__makeTemplateObject:()=>O,__importStar:()=>E,__importDefault:()=>x,__classPrivateFieldGet:()=>S,__classPrivateFieldSet:()=>P});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])})(t,e)};function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}var s=function(){return(s=Object.assign||function(t){for(var e,o=1,r=arguments.length;o<r;o++)for(var n in e=arguments[o])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};function i(t,e){var o={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(o[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(r=Object.getOwnPropertySymbols(t);n<r.length;n++)e.indexOf(r[n])<0&&Object.prototype.propertyIsEnumerable.call(t,r[n])&&(o[r[n]]=t[r[n]])}return o}function d(t,e,o,r){var n,s=arguments.length,i=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,o,r);else for(var d=t.length-1;d>=0;d--)(n=t[d])&&(i=(s<3?n(i):s>3?n(e,o,i):n(e,o))||i);return s>3&&i&&Object.defineProperty(e,o,i),i}function c(t,e){return function(o,r){e(o,r,t)}}function a(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function h(t,e,o,r){return new(o||(o=Promise))((function(n,s){function i(t){try{c(r.next(t))}catch(t){s(t)}}function d(t){try{c(r.throw(t))}catch(t){s(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(i,d)}c((r=r.apply(t,e||[])).next())}))}function w(t,e){var o,r,n,s,i={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:d(0),throw:d(1),return:d(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function d(s){return function(d){return function(s){if(o)throw new TypeError("Generator is already executing.");for(;i;)try{if(o=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((n=(n=i.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){i.label=s[1];break}if(6===s[0]&&i.label<n[1]){i.label=n[1],n=s;break}if(n&&i.label<n[2]){i.label=n[2],i.ops.push(s);break}n[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],r=0}finally{o=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,d])}}}var l=Object.create?function(t,e,o,r){void 0===r&&(r=o),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[o]}})}:function(t,e,o,r){void 0===r&&(r=o),t[r]=e[o]};function u(t,e){for(var o in t)"default"===o||Object.prototype.hasOwnProperty.call(e,o)||l(e,t,o)}function f(t){var e="function"==typeof Symbol&&Symbol.iterator,o=e&&t[e],r=0;if(o)return o.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function p(t,e){var o="function"==typeof Symbol&&t[Symbol.iterator];if(!o)return t;var r,n,s=o.call(t),i=[];try{for(;(void 0===e||e-- >0)&&!(r=s.next()).done;)i.push(r.value)}catch(t){n={error:t}}finally{try{r&&!r.done&&(o=s.return)&&o.call(s)}finally{if(n)throw n.error}}return i}function m(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(p(arguments[e]));return t}function y(){for(var t=0,e=0,o=arguments.length;e<o;e++)t+=arguments[e].length;var r=Array(t),n=0;for(e=0;e<o;e++)for(var s=arguments[e],i=0,d=s.length;i<d;i++,n++)r[n]=s[i];return r}function g(t,e,o){if(o||2===arguments.length)for(var r,n=0,s=e.length;n<s;n++)!r&&n in e||(r||(r=Array.prototype.slice.call(e,0,n)),r[n]=e[n]);return t.concat(r||e)}function v(t){return this instanceof v?(this.v=t,this):new v(t)}function b(t,e,o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,n=o.apply(t,e||[]),s=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(t){n[t]&&(r[t]=function(e){return new Promise((function(o,r){s.push([t,e,o,r])>1||d(t,e)}))})}function d(t,e){try{(o=n[t](e)).value instanceof v?Promise.resolve(o.value.v).then(c,a):h(s[0][2],o)}catch(t){h(s[0][3],t)}var o}function c(t){d("next",t)}function a(t){d("throw",t)}function h(t,e){t(e),s.shift(),s.length&&d(s[0][0],s[0][1])}}function _(t){var e,o;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,n){e[r]=t[r]?function(e){return(o=!o)?{value:v(t[r](e)),done:"return"===r}:n?n(e):e}:n}}function C(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,o=t[Symbol.asyncIterator];return o?o.call(t):(t=f(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(o){e[o]=t[o]&&function(e){return new Promise((function(r,n){!function(t,e,o,r){Promise.resolve(r).then((function(e){t({value:e,done:o})}),e)}(r,n,(e=t[o](e)).done,e.value)}))}}}function O(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var j=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e};function E(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var o in t)"default"!==o&&Object.prototype.hasOwnProperty.call(t,o)&&l(e,t,o);return j(e,t),e}function x(t){return t&&t.__esModule?t:{default:t}}function S(t,e,o,r){if("a"===o&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===o?r:"a"===o?r.call(t):r?r.value:e.get(t)}function P(t,e,o,r,n){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!n)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?n.call(t,o):n?n.value=o:e.set(t,o),o}}},e={};function o(r){var n=e[r];if(void 0!==n)return n.exports;var s=e[r]={exports:{}};return t[r](s,s.exports,o),s.exports}o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=o(549);const e={packed_1:e=>{const o=new t.World(e);class r{constructor(){this.value=0}}class n{constructor(){this.value=1}}class s{constructor(){this.value=1}}class i{constructor(){this.value=1}}class d{constructor(){this.value=1}}o.registerComponent(r),o.registerComponent(n),o.registerComponent(s),o.registerComponent(i),o.registerComponent(d);const c=o.createQuery([r]);for(let t=0;t<e;t++){const t=o.createEntity();o.addComponent(t,new r),o.addComponent(t,new n),o.addComponent(t,new s),o.addComponent(t,new i),o.addComponent(t,new d)}return()=>{for(const t of c.entities)o.getComponent(t,r).value*=2}},packed_5:e=>{const o=new t.World(e);class r{constructor(){this.value=0}}class n{constructor(){this.value=1}}class s{constructor(){this.value=1}}class i{constructor(){this.value=1}}class d{constructor(){this.value=1}}o.registerComponent(r),o.registerComponent(n),o.registerComponent(s),o.registerComponent(i),o.registerComponent(d);const c=o.createQuery([r]),a=o.createQuery([n]),h=o.createQuery([s]),w=o.createQuery([i]),l=o.createQuery([d]);for(let t=0;t<e;t++){const t=o.createEntity();o.addComponent(t,new r),o.addComponent(t,new n),o.addComponent(t,new s),o.addComponent(t,new i),o.addComponent(t,new d)}return()=>{for(const t of c.entities)o.getComponent(t,r).value*=2;for(const t of a.entities)o.getComponent(t,n).value*=2;for(const t of h.entities)o.getComponent(t,s).value*=2;for(const t of w.entities)o.getComponent(t,i).value*=2;for(const t of l.entities)o.getComponent(t,d).value*=2}},simple_iter:e=>{const o=new t.World(e);class r{constructor(){this.value=0}}class n{constructor(){this.value=1}}class s{constructor(){this.value=1}}class i{constructor(){this.value=1}}class d{constructor(){this.value=1}}o.registerComponent(r),o.registerComponent(n),o.registerComponent(s),o.registerComponent(i),o.registerComponent(d);const c=o.createQuery([r,n]),a=o.createQuery([s,i]),h=o.createQuery([s,d]);for(let t=0;t<e;t++){const t=o.createEntity();o.addComponent(t,new r),o.addComponent(t,new n);const e=o.createEntity();o.addComponent(e,new r),o.addComponent(e,new n),o.addComponent(e,new s);const c=o.createEntity();o.addComponent(c,new r),o.addComponent(c,new n),o.addComponent(c,new s),o.addComponent(c,new i);const a=o.createEntity();o.addComponent(a,new r),o.addComponent(a,new n),o.addComponent(a,new s),o.addComponent(a,new d)}return()=>{for(const t of c.entities){const e=o.getComponent(t,r),s=o.getComponent(t,n),i=e.value;e.value=s.value,s.value=i}for(const t of a.entities){const e=o.getComponent(t,s),r=o.getComponent(t,i),n=e.value;e.value=r.value,r.value=n}for(const t of h.entities){const e=o.getComponent(t,s),r=o.getComponent(t,d),n=e.value;e.value=r.value,r.value=n}}},frag_iter:e=>{const o=new t.World(e);class r{constructor(){this.value=1}}class n{constructor(){this.value=0}}const s=Array.from("ABCDEFGHIJKLMNOPQRSTUVWXYZ",(t=>Function("Component",`return class ${t} extends Component {}`)(n)));s.forEach((t=>o.registerComponent(t))),o.registerComponent(r);const i=o.createQuery([r]);for(let t=0;t<e;t++)for(const t of s){const e=o.createEntity();o.addComponent(e,new t),o.addComponent(e,new r)}return()=>{for(const t of i.entities)o.getComponent(t,r).value*=2}},entity_cycle:e=>{const o=new t.World(e);class r{}class n{}o.registerComponent(r),o.registerComponent(n);const s=o.createQuery([r]),i=o.createQuery([n]);for(let t=0;t<e;t++){const t=o.createEntity();o.addComponent(t,new r)}return()=>{for(const t of s.entities){const t=o.createEntity();o.addComponent(t,new n);const e=o.createEntity();o.addComponent(e,new n)}for(const t of i.entities)o.removeEntity(t)}},add_remove:e=>{const o=new t.World(e);class r{}class n{}o.registerComponent(r),o.registerComponent(n);const s=o.createQuery([r]),i=o.createQuery([r,n]);for(let t=0;t<e;t++){const t=o.createEntity();o.addComponent(t,new r)}return()=>{for(const t of s.entities)o.addComponent(t,new n);for(const t of i.entities)o.removeComponent(t,n)}}},r=self,n={packed_1:5e3,packed_5:1e3,simple_iter:1e3,frag_iter:100,entity_cycle:1e3,add_remove:1e3},s=t=>{let e=1,o=0,r=0;for(;r<500;){let n=i(t,e);o=n/e,e*=2,r+=n}let n=500/o,s=i(t,n);function i(t,e){let o=performance.now();for(let o=0;o<e;o++)t();return performance.now()-o}return{hz:n/s*1e3,ms:s/n}};for(const t in e){const o=s(e[t](n[t]));r.postMessage(Object.assign(Object.assign({},o),{test:t}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,